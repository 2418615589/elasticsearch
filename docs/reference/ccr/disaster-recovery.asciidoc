[role="xpack"]
[[ccr-disaster-recovery-tutorial]]
=== Tutorial: Configure disaster recovery with {ccr}
++++
<titleabbrev>Configure disaster recovery</titleabbrev>
++++

////
[source,console]
----
PUT /server-metrics
{
  "settings" : {
    "index" : {
      "number_of_shards" : 1,
      "number_of_replicas" : 0
    }
  },
  "mappings" : {
    "properties" : {
      "@timestamp" : {
        "type" : "date"
      },
      "accept" : {
        "type" : "long"
      },
      "deny" : {
        "type" : "long"
      },
      "host" : {
        "type" : "keyword"
      },
      "response" : {
        "type" : "float"
      },
      "service" : {
        "type" : "keyword"
      },
      "total" : {
        "type" : "long"
      }
    }
  }
}
----
// TESTSETUP
////

Learn how to configure failover between two clusters using {ccr}. The cluster
that contains the leader index is considered the production datacenter. You'll
replicate this index to a follower index on a connected cluster, which acts as
the disaster recovery datacenter in a failover scenario.

If the production datacenter goes offline, the recovery datacenter assumes this
role. When the production datacenter is back online, it assumes the role of the
recovery datacenter and begins replicating the leader index from the connected
cluster.

To complete this tutorial, you configure a 
<<ccr-single-datacenter-recovery,one-way connection>> between two clusters using 
{ccr}.

NOTE: {ccr-cap} provides functionality to replicate user-generated indices only.
{ccr-cap} isn't designed for replicating system-generated indices or snapshot
settings, and can't replicate {ilm-init} or {slm-init} policies across clusters.

==== Prerequisites
Before completing this tutorial,
<<ccr-getting-started-tutorial,set up cross cluster replication>> to connect two 
clusters and configure a leader and follower index.

IMPORTANT: Writes (such as ingestion or updates) should occur only on the leader
index in the production datacenter. To make changes, you must update the leader index. Because they are read-only, follower indices reject any writes.

Assuming the two clusters setup are `prod1` and `prod2` while `prod1` being the
leader and `prod2` being the follower. The index replicated from `prod1` to
`prod2` is called `my_index`.

==== When `prod1` is down

. On the Clients side, pause ingestion of `my_index` into `prod1`.
+
TIP: Ensure no writes are occurring on the leader index (if the data centre is
down, or cluster is unavailable, no action needed).

. On the Elasticsearch side, convert the follower indices in the `prod2`
into regular indices so that it will be capable of accepting writes.
+
[source,console-result]
----
### On prod2 cluster ###
POST /my_index/_ccr/pause_follow
POST /my_index/_close           
POST /my_index/_ccr/unfollow    
POST /my_index/_open
----

. On the Client side, manually re-enable ingestion of `my_index` and
direct to the `prod2` cluster. (You can test that the index should be writable:
+
[source,console-result]
----
### On prod2 cluster ###
POST my_index/_doc/2
{
  "foo": "new"
}  
----
TIP: You should also redirect all search traffic to the `prod2` cluster during
this time.


==== When `prod1` comes back
You can simply swap the leader and follower role of `prod1` and `prod2` so that
`prod2` becomes the new leader and `prod1` becomes the follower. 

. In order for the indices to follow the leader cluster, existing data
need to be discard before you can turn the index into a follower. Ensure the
most up-to-date data is available on `prod2` prior to deleting the index on
`prod1`.  

. Create follower indices in `prod1`, to follow the leader index in
`prod2`.  
+
[source,console-result]
----
### On prod1 cluster ###
DELETE my_index

### On prod1 cluster ###
PUT /my_index/_ccr/follow 
{ 
  "remote_cluster" : "prod2", 
  "leader_index" : "my_index" 
}
----
+
NOTE: It might take some time for the follower indices on `prod1` to be
recreated and replicated from `prod2`.

